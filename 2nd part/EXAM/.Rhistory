# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,2], linetype = 'dashed')) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,2]), linetype = 'dashed') +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,2]), alpha = 0.67) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quad_cons + confint(quad_reg)[2,2],
yend = quad_cons + confint(quad_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
cub_reg = lm(y ~ I(xnorm <= 0)*poly(xnorm, 3, raw = TRUE), data = df) # Regressing
cub_fit = cub_reg$fitted.values # Fitted values
cub_cons = cub_reg$coefficients[1] # Constant (for plotting purposes)
cub_alpha_rdd = cub_reg$coefficients[2] # alpha_RDD estimate.
cub_alpha_rdd
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, cub_fit), aes(x = df.xnorm, y = cub_fit)) +
geom_point(alpha = 0.2)  +
geom_segment(aes(x = 0, xend = 0, y = cub_cons + confint(cub_reg)[2,1],
yend = cub_cons + confint(cub_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=cub_cons + confint(cub_reg)[2,1],
yend = cub_cons + confint(cub_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=cub_cons + confint(cub_reg)[2,2],
yend = cub_cons + confint(cub_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, cubic specification with full polynomial")
# Plotting (using xbin in the x-axis):
ggplot(data.frame(df$xbin, cub_fit), aes(x = df.xbin, y = cub_fit)) +
geom_point(alpha = 0.2) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (bin'd xnorm values)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, cubic specification with full polynomial (using bin'd xnom values)")
quar_reg = lm(y ~ I(xnorm <= 0)*poly(xnorm, 4, raw = TRUE), data = df) # Regressing
quar_fit = quar_reg$fitted.values # Fitted values
quar_cons = quar_reg$coefficients[1] # Constant (for plotting purposes)
quar_alpha_rdd = quar_reg$coefficients[2] # alpha_RDD estimate.
quar_alpha_rdd
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,2],
yend = quar_cons + confint(quar_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=1, color="red") +
geom_hline(yintercept = quad_cons, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
geom_hline(yintercept = quad_cons + quad_alpha_rdd, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, cub_fit), aes(x = df.xnorm, y = cub_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=1, color="red") +
geom_hline(yintercept = cub_cons, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
geom_hline(yintercept = cub_cons + cub_alpha_rdd, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, cubic specification with full polynomial")
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=1, color="red") +
geom_hline(yintercept = quar_cons, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
geom_hline(yintercept = quar_cons + quar_alpha_rdd, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,2],
yend = quar_cons + confint(quar_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,2],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_vline(xintercept = 0, linetype = 'dashed', size=1, color="red") +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,2],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="red") +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,2]),
size = 1.1) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,2],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="red") +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,2],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="red") +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
ggplot(data.frame(df$xnorm, cub_fit), aes(x = df.xnorm, y = cub_fit)) +
geom_point(alpha = 0.2)  +
geom_segment(aes(x = 0, xend = 0, y = cub_cons + confint(cub_reg)[2,1],
yend = cub_cons + confint(cub_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=cub_cons + confint(cub_reg)[2,1],
yend = cub_cons + confint(cub_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=cub_cons + confint(cub_reg)[2,2],
yend = cub_cons + confint(cub_reg)[2,2])) +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="red") +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, cubic specification with full polynomial")
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_segment(aes(x = 0, xend = 0, y = quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quad_cons + confint(quad_reg)[2,2],
yend = quad_cons + confint(quad_reg)[2,2])) +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="red") +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="red") +
geom_segment(aes(x = 0, xend = 0, y = quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quad_cons + confint(quad_reg)[2,1],
yend = quad_cons + confint(quad_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quad_cons + confint(quad_reg)[2,2],
yend = quad_cons + confint(quad_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
ggplot(data.frame(df$xnorm, cub_fit), aes(x = df.xnorm, y = cub_fit)) +
geom_point(alpha = 0.2)  +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="red") +
geom_segment(aes(x = 0, xend = 0, y = cub_cons + confint(cub_reg)[2,1],
yend = cub_cons + confint(cub_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=cub_cons + confint(cub_reg)[2,1],
yend = cub_cons + confint(cub_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=cub_cons + confint(cub_reg)[2,2],
yend = cub_cons + confint(cub_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, cubic specification with full polynomial")
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="red") +
geom_segment(aes(x = 0, xend = 0, y = quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,2],
yend = quar_cons + confint(quar_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
poiy_reg = function(degree) {
lm(y ~ I(xnorm <= 0)*poly(xnorm, degree, raw = TRUE), data = df)
}
library(tidyverse)
library(ggplot2)
library(purrr)
setwd(this.path::here())
df = read_csv('progresaRDD_exam_q1.csv')
poiy_reg = function(degree) {
lm(y ~ I(xnorm <= 0)*poly(xnorm, degree, raw = TRUE), data = df)
}
quad_reg = poly_reg(2) # Regressing
poly_reg = function(degree) {
lm(y ~ I(xnorm <= 0)*poly(xnorm, degree, raw = TRUE), data = df)
}
quad_reg = poly_reg(2) # Regressing
quad_fit = quad_reg$fitted.values # Fitted values
quad_cons = quad_reg$coefficients[1] # Constant (for plotting purposes)
quad_alpha_rdd = quad_reg$coefficients[2] # alpha_RDD estimate.
quad_alpha_rdd
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quad_fit), aes(x = df.xnorm, y = quad_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=1, color="red") +
geom_hline(yintercept = quad_cons, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
geom_hline(yintercept = quad_cons + quad_alpha_rdd, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quadratic specification with full polynomial")
cub_reg = poly_reg(3) # Regressing
cub_fit = cub_reg$fitted.values # Fitted values
cub_cons = cub_reg$coefficients[1] # Constant (for plotting purposes)
cub_alpha_rdd = cub_reg$coefficients[2] # alpha_RDD estimate.
cub_alpha_rdd
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, cub_fit), aes(x = df.xnorm, y = cub_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=1, color="red") +
geom_hline(yintercept = cub_cons, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
geom_hline(yintercept = cub_cons + cub_alpha_rdd, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, cubic specification with full polynomial")
# Including a confidence interval:
ggplot(data.frame(df$xnorm, cub_fit), aes(x = df.xnorm, y = cub_fit)) +
geom_point(alpha = 0.2)  +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="black") +
geom_segment(aes(x = 0, xend = 0, y = cub_cons + confint(cub_reg)[2,1],
yend = cub_cons + confint(cub_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=cub_cons + confint(cub_reg)[2,1],
yend = cub_cons + confint(cub_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=cub_cons + confint(cub_reg)[2,2],
yend = cub_cons + confint(cub_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, cubic specification with full polynomial")
# Plotting (using xbin in the x-axis):
ggplot(data.frame(df$xbin, cub_fit), aes(x = df.xbin, y = cub_fit)) +
geom_point(alpha = 0.2) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (bin'd xnorm values)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, cubic specification with full polynomial (using bin'd xnom values)")
quar_reg = poly_reg(4) # Regressing
quar_fit = quar_reg$fitted.values # Fitted values
quar_cons = quar_reg$coefficients[1] # Constant (for plotting purposes)
quar_alpha_rdd = quar_reg$coefficients[2] # alpha_RDD estimate.
quar_alpha_rdd
# Plotting (using xnorm in the x-axis):
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=1, color="red") +
geom_hline(yintercept = quar_cons, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
geom_hline(yintercept = quar_cons + quar_alpha_rdd, linetype = 'dashed', size=0.5, color="black", alpha=0.3) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
# Including a confidence interval:
ggplot(data.frame(df$xnorm, quar_fit), aes(x = df.xnorm, y = quar_fit)) +
geom_point(alpha = 0.2) +
geom_vline(xintercept = 0, linetype = 'dashed', size=.1, color="black") +
geom_segment(aes(x = 0, xend = 0, y = quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,2])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,1],
yend = quar_cons + confint(quar_reg)[2,1])) +
geom_segment(aes(x=-1, xend=1, y=quar_cons + confint(quar_reg)[2,2],
yend = quar_cons + confint(quar_reg)[2,2])) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (xnorm, elegible if <= 0)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial")
# Plotting (using xbin in the x-axis):
ggplot(data.frame(df$xbin, quar_fit), aes(x = df.xbin, y = quar_fit)) +
geom_point(alpha = 0.2) +
theme_bw() + scale_color_brewer(palette="Paired") +
xlab("Elegibility (bin'd xnorm values)") +
ylab("Scholl enrollment status (Y)") +
ggtitle("RDD fitted values, quartic specification with full polynomial (using bin'd xnom values)")
summary(poly_reg(4))
quad_reg$coefficients[2]
alpha_poly_estimator = function (degree) {
reg = poly_reg(degree)
reg$coefficients[2]
}
rdd_of_each_poly = map_dbl(1:10, alpha_poly_estimator)
plot(1:10, rdd_of_each_poly)
rdd_of_each_poly = map_dbl(1:30, alpha_poly_estimator)
plot(1:30, rdd_of_each_poly)
rdd_of_each_poly = map_dbl(1:100, alpha_poly_estimator)
plot(1:100, rdd_of_each_poly)
rdd_of_each_poly = map_dbl(1:10, alpha_poly_estimator)
plot(1:10, rdd_of_each_poly)
library(ggplot2)
data.frame(1:10, rdd_of_each_poly)
ggplot(df = data.frame(1:10, rdd_of_each_poly), aes(x=x1.10, y = rdd_of_each_poly)) + geom_point() +
geom_smooth()
ggplot(data = data.frame(1:10, rdd_of_each_poly), aes(x=x1.10, y = rdd_of_each_poly)) + geom_point() +
geom_smooth()
data.frame(1:10, rdd_of_each_poly)
data.frame(1:10, rdd_of_each_poly)[,'1:10']
colnames(data.frame(1:10, rdd_of_each_poly))
ggplot(data = data.frame(1:10, rdd_of_each_poly), aes(x=X1.10, y = rdd_of_each_poly)) + geom_point() +
geom_smooth()
set.seed(1337)
library(evd)
library(furrr)
library(ggplot2)
X_mat_1000 = matrix(rlnorm(100*1000, log(25/sqrt(25+3)), log(1+3/25)), nrow = 1000)
eps0_mat_1000 = matrix(rgumbel(100*1000), nrow = 1000)
eps1_mat_1000 = matrix(rgumbel(100*1000), nrow = 1000)
Y_mat_1000 = ifelse(0.8 + 0.7*X_mat_1000 + eps1_mat_1000 >= eps0_mat_1000, 1, 0)
data_y_mean_1000 = colMeans(Y_mat_1000)
data_cov_1000 = mapply(function(x, y){cov(x, y)}, as.data.frame(Y_mat_1000),
as.data.frame(X_mat_1000))
X_mat_500 = matrix(rlnorm(100*500, log(25/sqrt(25+3)), log(1+3/25)), nrow = 500)
eps0_mat_1000 = matrix(rgumbel(100*500), nrow = 500)
eps1_mat_1000 = matrix(rgumbel(100*500), nrow = 500)
Y_mat_1000 = ifelse(0.8 + 0.7*X_mat_500 + eps1_mat_1000 >= eps0_mat_1000, 1, 0)
data_y_mean_1000 = colMeans(Y_mat_1000)
data_cov_1000 = mapply(function(x, y){cov(x, y)}, as.data.frame(Y_mat_1000),
as.data.frame(X_mat_500))
alpha_gmm_minimizer_20_1000 = function(param, col_index) {
data_x = matrix(rep(X_mat_500[, col_index], 20), nrow = 500)
sim_eps0 = matrix(rgumbel(30*500), nrow = 500)
sim_eps1 = matrix(rgumbel(30*500), nrow = 500)
estimated_choice = ifelse(param[1] + param[2]*data_x + sim_eps0 >= sim_eps1, 1, 0)
mean_of_sims = colMeans(estimated_choice)
mean_of_means = mean(mean_of_sims)
cov_of_sims_with_x = mapply(function(x, y){cov(x, y)}, as.data.frame(estimated_choice),
as.data.frame(data_x))
mean_of_covs = mean(cov_of_sims_with_x)
moment_diff_vec = c(data_y_mean_1000[col_index] - mean_of_means,
data_cov_1000[col_index] - mean_of_covs)
t(moment_diff_vec) %*% moment_diff_vec
}
estimator_with_20_sims = function(param) {
results_20_1000 = future_map(1:100, ~ optim(param, alpha_gmm_minimizer_20_1000, col_index = .x
control = list('maxit' = '1000')),
.options = furrr_options(seed = T))
convergence_20_1000 = purrr::map(1:100, ~ results_20_1000[[.x]]$convergence)
alpha_est_100_1000 = t(matrix(unlist(purrr::map(1:10, ~ results_20_1000[[.x]]$par)), nrow = 2))
return(c(colMeans(alpha_est_100_1000), sum(unlist(convergence_20_1000))))
}
estimator_with_20_sims = function(param) {
results_20_1000 = future_map(1:100, ~ optim(param, alpha_gmm_minimizer_20_1000, col_index = .x,
control = list('maxit' = '1000')),
.options = furrr_options(seed = T))
convergence_20_1000 = purrr::map(1:100, ~ results_20_1000[[.x]]$convergence)
alpha_est_100_1000 = t(matrix(unlist(purrr::map(1:10, ~ results_20_1000[[.x]]$par)), nrow = 2))
return(c(colMeans(alpha_est_100_1000), sum(unlist(convergence_20_1000))))
}
end_locations = purrr::map2(expand.grid(a0 = seq(0.6, 1, .02), a1 = seq(.5, .9, .02))[,1],
expand.grid(a0 = seq(0.6, 1, .02), a1 = seq(.5, .9, .02))[,2],
~ estimator_with_20_sims(c(.x, .y)))
alpha_gmm_minimizer_20_1000 = function(param, col_index) {
data_x = matrix(rep(X_mat_500[, col_index], 30), nrow = 500)
sim_eps0 = matrix(rgumbel(30*500), nrow = 500)
sim_eps1 = matrix(rgumbel(30*500), nrow = 500)
estimated_choice = ifelse(param[1] + param[2]*data_x + sim_eps0 >= sim_eps1, 1, 0)
mean_of_sims = colMeans(estimated_choice)
mean_of_means = mean(mean_of_sims)
cov_of_sims_with_x = mapply(function(x, y){cov(x, y)}, as.data.frame(estimated_choice),
as.data.frame(data_x))
mean_of_covs = mean(cov_of_sims_with_x)
moment_diff_vec = c(data_y_mean_1000[col_index] - mean_of_means,
data_cov_1000[col_index] - mean_of_covs)
t(moment_diff_vec) %*% moment_diff_vec
}
estimator_with_20_sims = function(param) {
results_20_1000 = future_map(1:100, ~ optim(param, alpha_gmm_minimizer_20_1000, col_index = .x,
control = list('maxit' = '1000')),
.options = furrr_options(seed = T))
convergence_20_1000 = purrr::map(1:100, ~ results_20_1000[[.x]]$convergence)
alpha_est_100_1000 = t(matrix(unlist(purrr::map(1:10, ~ results_20_1000[[.x]]$par)), nrow = 2))
return(c(colMeans(alpha_est_100_1000), sum(unlist(convergence_20_1000))))
}
end_locations = purrr::map2(expand.grid(a0 = seq(0.6, 1, .02), a1 = seq(.5, .9, .02))[,1],
expand.grid(a0 = seq(0.6, 1, .02), a1 = seq(.5, .9, .02))[,2],
~ estimator_with_20_sims(c(.x, .y)))
set.seed(1337)
library(evd)
library(furrr)
library(ggplot2)
plan(multisession)
X_mat_500 = matrix(rlnorm(100*500, log(25/sqrt(25+3)), log(1+3/25)), nrow = 500)
eps0_mat_1000 = matrix(rgumbel(100*500), nrow = 500)
eps1_mat_1000 = matrix(rgumbel(100*500), nrow = 500)
Y_mat_1000 = ifelse(0.8 + 0.7*X_mat_500 + eps1_mat_1000 >= eps0_mat_1000, 1, 0)
data_y_mean_1000 = colMeans(Y_mat_1000)
data_cov_1000 = mapply(function(x, y){cov(x, y)}, as.data.frame(Y_mat_1000),
as.data.frame(X_mat_500))
alpha_gmm_minimizer_20_1000 = function(param, col_index) {
data_x = matrix(rep(X_mat_500[, col_index], 30), nrow = 500)
sim_eps0 = matrix(rgumbel(30*500), nrow = 500)
sim_eps1 = matrix(rgumbel(30*500), nrow = 500)
estimated_choice = ifelse(param[1] + param[2]*data_x + sim_eps0 >= sim_eps1, 1, 0)
mean_of_sims = colMeans(estimated_choice)
mean_of_means = mean(mean_of_sims)
cov_of_sims_with_x = mapply(function(x, y){cov(x, y)}, as.data.frame(estimated_choice),
as.data.frame(data_x))
mean_of_covs = mean(cov_of_sims_with_x)
moment_diff_vec = c(data_y_mean_1000[col_index] - mean_of_means,
data_cov_1000[col_index] - mean_of_covs)
t(moment_diff_vec) %*% moment_diff_vec
}
estimator_with_20_sims = function(param) {
results_20_1000 = future_map(1:100, ~ optim(param, alpha_gmm_minimizer_20_1000, col_index = .x,
control = list('maxit' = '1000')),
.options = furrr_options(seed = T))
convergence_20_1000 = purrr::map(1:100, ~ results_20_1000[[.x]]$convergence)
alpha_est_100_1000 = t(matrix(unlist(purrr::map(1:10, ~ results_20_1000[[.x]]$par)), nrow = 2))
return(c(colMeans(alpha_est_100_1000), sum(unlist(convergence_20_1000))))
}
end_locations = purrr::map2(expand.grid(a0 = seq(0.6, 1, .02), a1 = seq(.5, .9, .02))[,1],
expand.grid(a0 = seq(0.6, 1, .02), a1 = seq(.5, .9, .02))[,2],
~ estimator_with_20_sims(c(.x, .y)))
df = cbind(expand.grid(a0 = seq(0.6, 1, .02), a1 = seq(.5, .9, .02)),
t(matrix(unlist(end_locations), nrow = 3))) %>%
rename(xend = `1`, yend = `2`)
library(tidyverse)
df = cbind(expand.grid(a0 = seq(0.6, 1, .02), a1 = seq(.5, .9, .02)),
t(matrix(unlist(end_locations), nrow = 3))) %>%
rename(xend = `1`, yend = `2`)
ggplot(df) + geom_segment(aes(x=a0, y = a1, xend=xend, yend = yend),
arrow = arrow(length = unit(0.1, "cm"))) +
xlim(0.5, 1) + ylim(0.5, 1)
save.image("~/GitHub/econometrics/2nd part/EXAM/nelder_mead_graph.RData")
