# Plotting
quartic_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q7, f_quartic_values), aes(x=x0_grid_q7, y=f_quartic_values), size=1) +
labs(x = "Finishing time (minutes)", y  = "Percentile") +
geom_vline(xintercept = 4*60, size=1) +
geom_vline(xintercept = 4.5*60, size=1) +
geom_vline(xintercept = 5*60, size=1) +
annotate(geom="text", x=244, y=0.008, label="4H", angle=90) +
annotate(geom="text", x=4.5*60+4, y=0.008, label="4.5H", angle=90) +
annotate(geom="text", x=5*60+4, y=0.008, label="5H", angle=90)+
ggtitle('Density estimates for marathon finishing times using the Quartic Kernel') +
theme_bw()
quartic_plot
# Plotting the density estimates:
quartic_opt_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q7, f_quartic_opt_values), aes(x=x0_grid_q7, y=f_quartic_opt_values), size=1.5) +
geom_line(size = 1) +
labs(x = "Grid", y  = "Percentile") +
geom_vline(xintercept = 4*60,
color = "red", size=1) +
geom_vline(xintercept = 4.5*60,
color = "green", size=1) +
geom_vline(xintercept = 5*60,
color = "blue", size=1)
# Calculating the f_quartic optimal values for each point in the grid:
f_quartic_opt_values =  purrr::map_dbl(x0_grid_q7, f_quartic, data = df$chiptime, h = h_optimal)
# Plotting the density estimates:
quartic_opt_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q7, f_quartic_opt_values), aes(x=x0_grid_q7, y=f_quartic_opt_values), size=1.5) +
geom_line(size = 1) +
labs(x = "Grid", y  = "Percentile") +
geom_vline(xintercept = 4*60,
color = "red", size=1) +
geom_vline(xintercept = 4.5*60,
color = "green", size=1) +
geom_vline(xintercept = 5*60,
color = "blue", size=1)
# As calculated in Q3: h^* = 2.778*n^{-0.2} * min(s, IQR/1.349).
# Defininf the optimal bandwith using the Quartic Kernel:
h_optimal = 2.778*(length(df$chiptime))^(-1/5)*min(sd(df$chiptime), IQR(df$chiptime)/1.349)
# Calculating the f_quartic optimal values for each point in the grid:
f_quartic_opt_values =  purrr::map_dbl(x0_grid_q7, f_quartic, data = df$chiptime, h = h_optimal)
# Plotting the density estimates:
quartic_opt_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q7, f_quartic_opt_values), aes(x=x0_grid_q7, y=f_quartic_opt_values), size=1.5) +
geom_line(size = 1) +
labs(x = "Grid", y  = "Percentile") +
geom_vline(xintercept = 4*60,
color = "red", size=1) +
geom_vline(xintercept = 4.5*60,
color = "green", size=1) +
geom_vline(xintercept = 5*60,
color = "blue", size=1)
quartic_opt_plot
# Plotting the density estimates:
quartic_opt_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q7, f_quartic_opt_values), aes(x=x0_grid_q7, y=f_quartic_opt_values), size=1.5) +
geom_line(size = 1) +
labs(x = "Grid", y  = "Percentile") +
geom_vline(xintercept = 4*60, size=1) +
geom_vline(xintercept = 4.5*60, size=1) +
geom_vline(xintercept = 5*60, size=1) +
annotate(geom="text", x=244, y=0.008, label="4H", angle=90) +
annotate(geom="text", x=4.5*60+4, y=0.008, label="4.5H", angle=90) +
annotate(geom="text", x=5*60+4, y=0.008, label="5H", angle=90)+
ggtitle('Density estimates for marathon finishing times (Quartic + Optimal Bandwith)') +
theme_bw()
quartic_opt_plot
# Plotting the density estimates:
quartic_opt_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q7, f_quartic_opt_values), aes(x=x0_grid_q7, y=f_quartic_opt_values), size=1) +
geom_line(size = 1) +
labs(x = "Grid", y  = "Percentile") +
geom_vline(xintercept = 4*60, size=1) +
geom_vline(xintercept = 4.5*60, size=1) +
geom_vline(xintercept = 5*60, size=1) +
annotate(geom="text", x=244, y=0.008, label="4H", angle=90) +
annotate(geom="text", x=4.5*60+4, y=0.008, label="4.5H", angle=90) +
annotate(geom="text", x=5*60+4, y=0.008, label="5H", angle=90)+
ggtitle('Density estimates for marathon finishing times (Quartic + Optimal Bandwith)') +
theme_bw()
quartic_opt_plot
# Plotting the density estimates:
quartic_opt_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q7, f_quartic_opt_values), aes(x=x0_grid_q7, y=f_quartic_opt_values), size=1) +
geom_line(size = 1) +
labs(x = "Finishing time (minutes)", y  = "Percentile") +
geom_vline(xintercept = 4*60, size=1) +
geom_vline(xintercept = 4.5*60, size=1) +
geom_vline(xintercept = 5*60, size=1) +
annotate(geom="text", x=244, y=0.008, label="4H", angle=90) +
annotate(geom="text", x=4.5*60+4, y=0.008, label="4.5H", angle=90) +
annotate(geom="text", x=5*60+4, y=0.008, label="5H", angle=90)+
ggtitle('Density estimates for marathon finishing times (Quartic + Optimal Bandwith)') +
theme_bw()
quartic_opt_plot
# Plotting:
lc_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1.5) +
geom_line(size = 1) +
labs(x = "Age", y  = "Time")
# Cleaning the dataset, as requested:
clean_df <- dplyr::filter(df, !is.na(age))
# Defining the local-constant estimator function:
local_constant <- function(y, x, x0, h_lc) {
n = length(y)
K_quartic_values =  purrr::map_dbl((x - x0)/h_lc, K_quartic)
sum_elements = K_quartic_values * y
m = sum(sum_elements)/sum(K_quartic_values)
return(m)
}
x0_grid_q9 = seq(7, 89, 5) # Defining the new grid.
# Obtaining the values of the local-constant estimator for each point in the grid:
local_constant_values <-  purrr::map_dbl(x0_grid_q9, local_constant, y = clean_df$chiptime, x = clean_df$age, h_lc = 3)
# Plotting:
lc_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1.5) +
geom_line(size = 1) +
labs(x = "Age", y  = "Time")
lc_plot
# Plotting:
lc_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(size = 1) +
labs(x = "Age", y  = "Time") +
ggtilte("Local-constant estimator")
lc_plot
# Plotting:
lc_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(size = 1) +
labs(x = "Age", y  = "Time") +
ggtitle("Local-constant estimator")
lc_plot
# Plotting:
lc_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(size = 1) +
labs(x = "Age", y  = "Time") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_plot
x0_grid_q10 <- seq(20, 70, 5) # Defining the grid.
first_factor <- function(x0_ff, h_ff) { # This function calculates (Z'KZ)^-1 for a given age and bandwidth.
element_ff <- function(xi, x0) {
zz <- as.matrix(c(1, xi - x0), ncol=1) %*% t(as.matrix(c(1, xi - x0), ncol=1))
K_quartic_values <-  purrr::map_dbl((xi - x0)/h_ff, K_quartic)
sum_element <- K_quartic_values*zz
return(sum_element)
}
ff <- solve(Reduce('+', lapply(clean_df$age, element_ff, x0 = x0_ff)))
return(ff)
}
second_factor <- function(x0_sf, h_sf) { # This function calculates Z'ky for a given age and bandwidth.
element_sf <- function(z, y, x0) {
zi <- as.matrix(c(1, z - x0), ncol=1)
K_quartic_values <-  purrr::map_dbl((z - x0)/h_sf, K_quartic)
yi <- y
sum_element <- K_quartic_values*zi*yi
return(sum_element)
}
sf <- Reduce('+', map2(clean_df$age, clean_df$chiptime, element_sf, x0 = x0_sf))
return(sf)
}
beta <- function(x0) { # This function caculates a particular beta vector, for a given age.
first_factor(x0, 3) %*% second_factor(x0, 3)
}
## CAUTION: THIS PART IS COMPUTATIONALLY BURDENSOME.
# Finally, now we use the lapply function over the "beta" function defined above
# in order to calculate all the betas, one for each grid age (20 to 70, with step 5, as requested):
betas <- lapply(x0_grid_q10, beta)
print(betas)
q10_graph_tibble = tibble(as.data.frame(matrix(unlist(betas), ncol = 2, byrow = TRUE)), age = x0_grid_q10) %>%
mutate(lowery = V1-3*V2,
lowerx = age - 3,
uppery = V1+3*V2,
upperx = age + 3)
q10_graph_tibble %>% ggplot(aes(x=age, y=V1)) + geom_line(alpha = 0.5, size = 1, linetype = 2) +
geom_segment(aes(x=lowerx, xend=upperx, y=lowery, yend = uppery), size = 1.1) + theme_bw()
q10_graph_tibble %>% ggplot(aes(x=age, y=V1)) +
geom_line(alpha = 0.5, size = 1, linetype = 2) +
geom_segment(aes(x=lowerx, xend=upperx, y=lowery, yend = uppery), size = 1.1) +
ggtitle('Local linear estimator')
q10_graph_tibble %>% ggplot(aes(x=age, y=V1)) +
geom_line(alpha = 0.5, size = 1, linetype = 2) +
geom_segment(aes(x=lowerx, xend=upperx, y=lowery, yend = uppery), size = 1.1) +
ggtitle('Local linear estimator') +
ylabel('Finishing time (minutes)') +
xlabel('Age')
q10_graph_tibble %>% ggplot(aes(x=age, y=V1)) +
geom_line(alpha = 0.5, size = 1, linetype = 2) +
geom_segment(aes(x=lowerx, xend=upperx, y=lowery, yend = uppery), size = 1.1) +
ggtitle('Local linear estimator') +
ylabel('Finishing time (minutes)') +
xlabel('Age') +
theme_bw()
q10_graph_tibble %>% ggplot(aes(x=age, y=V1)) +
geom_line(alpha = 0.5, size = 1, linetype = 2) +
geom_segment(aes(x=lowerx, xend=upperx, y=lowery, yend = uppery), size = 1.1) +
ggtitle('Local linear estimator') +
labs(x='Age', y='Finishing time (minutes)') +
theme_bw()
lc_plot
# Plotting:
lc_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(size = 1) +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_plot
q10_graph_tibble %>% ggplot(aes(x=age, y=V1)) +
geom_line(alpha = 0.5, size = 1, linetype = 2) +
geom_segment(aes(x=lowerx, xend=upperx, y=lowery, yend = uppery), size = 1.1) +
ggtitle('Local-linear estimator') +
labs(x='Age', y='Finishing time (minutes)') +
theme_bw()
ll_plot <- q10_graph_tibble %>% ggplot(aes(x=age, y=V1)) +
geom_line(alpha = 0.5, size = 1, linetype = 2) +
geom_segment(aes(x=lowerx, xend=upperx, y=lowery, yend = uppery), size = 1.1) +
ggtitle('Local-linear estimator') +
labs(x='Age', y='Finishing time (minutes)') +
theme_bw()
ll_plot
lc_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1) +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
xlim(20, 70)
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
xlim(20, 70) =
theme_bw()
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
xlim(20, 70) +
theme_bw()
# Cleaning the dataset, as requested:
clean_df <- dplyr::filter(df, !is.na(age))
# Defining the local-constant estimator function:
local_constant <- function(y, x, x0, h_lc) {
n = length(y)
K_quartic_values =  purrr::map_dbl((x - x0)/h_lc, K_quartic)
sum_elements = K_quartic_values * y
m = sum(sum_elements)/sum(K_quartic_values)
return(m)
}
x0_grid_q9 = seq(20, 70, 5) # Defining a grid for the ages.
# Obtaining the values of the local-constant estimator for each point in the grid:
local_constant_values <-  purrr::map_dbl(x0_grid_q9, local_constant, y = clean_df$chiptime, x = clean_df$age, h_lc = 3)
# Plotting:
lc_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q9, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(size = 1) +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1) +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
scale_color_manual(values = colors) +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
labs(x = "Year",
y = "(%)",
color = "Legend") +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
labs(x = "Year",
y = "(%)",
color = "Legend") +
scale_color_manual(values = colors) +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
scale_colour_manual("",
breaks = c("Local-constant", "Local-linear"),
values = c("blue", "red")) +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="Local-constant") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="Local-linear") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
scale_colour_manual("",
breaks = c("Local-constant", "Local-linear"),
values = c("blue", "red")) +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="Local-constant") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="Local-linear") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
scale_colour_manual("", breaks = c("Local-constant", "Local-linear"), values = c("blue", "red")) +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
#scale_colour_manual("", breaks = c("Local-constant", "Local-linear"), values = c("blue", "red")) +
theme_bw()
lc_ll_plot
length(data.frame(x0_grid_q10, local_constant_values))
nrow(data.frame(x0_grid_q10, local_constant_values))
ntow
nrow(q10_graph_tibble)
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant estimator") +
theme_bw()
lc_ll_plot
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant and Local-linear estimators") +
theme_bw()
lc_ll_plot # Adicionar legenda
lc_ll_plot <- ggplot() +
geom_line(data = data.frame(x0_grid_q10, local_constant_values), aes(x=x0_grid_q9, y=local_constant_values), size=1, color="blue") +
geom_line(data = q10_graph_tibble, aes(x=age, y=V1), size = 1, color="red") +
labs(x = "Age", y  = "Finishing time (minutes)") +
ggtitle("Local-constant and local-linear estimators") +
theme_bw()
lc_ll_plot # Adicionar legenda
lc_plot
ll_plot
tibble(q10_graph_tibble, local_constant_values)
?pivot_longer
??pivot_longer
pivot_longer()
)
pivot_longer(-age, names_to = 'values')
library(tidyverse)
pivot_longer(-age, names_to = 'values')
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values')
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot(aes(x=age, y=value, color = values)) + geom_line()
q10_graph_tibble
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot(aes(x=age, y=value, color = values)) +
geom_line() +
geom_segment(data = tibble(q10_graph_tibble, local_constant_values),
aes(x=lowerx, xend = upperx, y=lowery, yend=uppery))
?geom_segment
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot(aes(x=age, y=value, color = values)) +
geom_line() +
geom_segment(data = tibble(q10_graph_tibble, local_constant_values),
aes(x=lowerx, xend = upperx, y=lowery, yend=uppery))
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot(aes(x=age, y=value, color = values)) +
geom_line() +
geom_segment(data = q10_graph_tibble,
aes(x=lowerx, xend = upperx, y=lowery, yend=uppery))
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values')
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot(aes(x=age, y=value, color = values)) +
geom_line()
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot(aes(x=age, y=value, color = values)) +
geom_line() +
geom_segment(data = q10_graph_tibble,
aes(x=lowerx, xend = upperx, y=lowery, yend=uppery))
pivoted_data = tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values')
ggplot(data = q10_graph_tibble, aes(x=age, y=value)) +
geom_line()
ggplot(data = q10_graph_tibble, aes(x=age, y=V1)) +
geom_line()
library(tidyverse)
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot() +
geom_line(aes(x=age, y=value, linetype = values, color = values)) +
scale_linetype_discrete(labels = c('LC Estimator', 'LL Estimator')) +
scale_colour_discrete(labels = c('LC Estimator', 'LL Estimator')) +
labs(linetype = 'Estimators evaluated at grid points',
color = 'Estimators evaluated at grid points') +
geom_segment(data = q10_graph_tibble,
aes(x=lowerx, xend = upperx, y=lowery, yend=uppery)) +
xlab('Age') + ylab('Finishing time (minutes)') +
theme_bw()
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot() +
geom_line(aes(x=age, y=value, linetype = values, color = values)) +
scale_linetype_discrete(labels = c('LC Estimator', 'LL Estimator')) +
scale_colour_discrete(labels = c('LC Estimator', 'LL Estimator')) +
labs(linetype = 'Estimators evaluated at grid points',
color = 'Estimators evaluated at grid points') +
geom_segment(data = q10_graph_tibble,
aes(x=lowerx, xend = upperx, y=lowery, yend=uppery), color="blue") +
xlab('Age') + ylab('Finishing time (minutes)') +
theme_bw()
tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot() +
geom_line(aes(x=age, y=value, linetype = values, color = values)) +
scale_linetype_discrete(labels = c('LC Estimator', 'LL Estimator')) +
scale_colour_discrete(labels = c('LC Estimator', 'LL Estimator')) +
labs(linetype = 'Estimators evaluated at grid points',
color = 'Estimators evaluated at grid points') +
geom_segment(data = q10_graph_tibble,
aes(x=lowerx, xend = upperx, y=lowery, yend=uppery), color="cyan") +
xlab('Age') + ylab('Finishing time (minutes)') +
theme_bw()
lc_ll_plot <- tibble(q10_graph_tibble, local_constant_values) %>%
select(age, local_constant_values, V1) %>%
pivot_longer(-age, names_to = 'values') %>%
ggplot() +
geom_line(aes(x=age, y=value, linetype = values, color = values)) +
scale_linetype_discrete(labels = c('LC Estimator', 'LL Estimator')) +
scale_colour_discrete(labels = c('LC Estimator', 'LL Estimator')) +
labs(linetype = 'Estimators evaluated at grid points',
color = 'Estimators evaluated at grid points') +
geom_segment(data = q10_graph_tibble,
aes(x=lowerx, xend = upperx, y=lowery, yend=uppery), color="cyan") +
xlab('Age') + ylab('Finishing time (minutes)') +
theme_bw()
lc_ll_plot
first_factor(20, 3)
betas
x0.grid <- c(1,2)
x0.grid
install.packages('memuse')
memuse::Sys.meminfo()
