mme_synthetic_stat = function(param) {             #function that calculates the sample value of g
sum(data_ps1_q6$L*(log(data_ps1_q6$Y) - param*log(data_ps1_q6$K) -
(1-param)*log(data_ps1_q6$L)))
}
data_psi_q6
data_ps1_q6
fitted_curve =  purrr::map_dbl(seq(0, 1, 0.01), mme_synthetic_stat)
data_ps1_q6 <- readRDS('data_ps1_q6.Rds')
data_ps1_q7 <- readRDS('data_ps1_q7.Rds')
mme_synthetic_stat = function(param) {             #function that calculates the sample value of g
sum(data_ps1_q6$L*(log(data_ps1_q6$Y) - param*log(data_ps1_q6$K) -
(1-param)*log(data_ps1_q6$L)))
}
library(purrr)
fitted_curve =  purrr::map_dbl(seq(0, 1, 0.01), mme_synthetic_stat)
plot(fitted_curve)
fitted_curve =  purrr::map_dbl(seq(0, 1, 0.01), mme_synthetic_stat)
plot(fitted_curve)
sum((log(data_ps1_q6$Y) - param*log(data_ps1_q6$K) -
(1-param)*log(data_ps1_q6$L)))
plot(fitted_curve_2)
fitted_curve_2 =  purrr::map_dbl(seq(0, 1, 0.01), mme_synthetic_stat_2)
plot(fitted_curve_2)
fitted_curve_2 =  purrr::map_dbl(seq(0, 1, 0.01), mme_synthetic_stat_2)
mme_synthetic_stat_2 = function(param) {             #function that calculates the sample value of g
sum((log(data_ps1_q6$Y) - param*log(data_ps1_q6$K) -
(1-param)*log(data_ps1_q6$L)))
}
fitted_curve_2 =  purrr::map_dbl(seq(0, 1, 0.01), mme_synthetic_stat_2)
plot(fitted_curve_2)
index_2 = match(min(abs(fitted_curve_2)), abs(fitted_curve_2))
index_2
index = match(min(abs(fitted_curve)), abs(fitted_curve))
index
seq(0, 1, 0.01)[31]
mme_condition_vector = function(param) {                          #analogous function for two param
c1 = sum(data_ps1_q7$L*(log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K) -
param[2]*log(data_ps1_q7$L)))
c2 = sum(data_ps1_q7$K*(log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K) -
param[2]*log(data_ps1_q7$L)))
return(c(c1, c2))
}
mme_statistic = function(param) {                      #calculates the value of the stat for W = I
100*norm(mme_condition_vector(param), type = "2")^2
}
result_q7 = optim(c(0,0), mme_statistic, method = "BFGS")$par
result_q7
result_q7 = optim(c(0,0), mme_statistic)$par
result_q7 = optim(c(0,0), mme_statistic)$par
result_q7
result_q7 = optim(c(0,0), mme_statistic, method = "BFGS")$par
result_q7 = optim(c(0,0), mme_statistic, method = "BFGS")$par
fitted_curve_2 =  purrr::map_dbl(seq(0, 1, 0.01), mme_synthetic_stat_2)
fitted_curve_2
plot(seq(0, 1, 0.01, fitted_curve_2)
plot(seq(0, 1, 0.01, fitted_curve_2))
plot(seq(0, 1, 0.01), fitted_curve_2))
plot(seq(0, 1, 0.01), fitted_curve_2)
plot(fitted_curve_2, seq(0, 1, 0.01))
plot(fitted_curve_2, seq(0, 1, 0.01))
plot(fitted_curve_2)
x = seq(0, 1, 0.01)
x
fitted_curve_2 =  purrr::map_dbl(x, mme_synthetic_stat_2)
fitted_curve_2
view(data_ps1_q7)
View(data_ps1_q7)
focs_mme_condition_vector = function(param) {
c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$w)
c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$r)
}
mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method = "BFGS")
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method = "BFGS")
focs_result_q7 = optim(c(0,0), focs_mme_statistic)
focs_result_q7
result_q8 = optim(c(0,0), mme_statistic, method = "BFGS")$par
focs_result_q7 = optim(c(0,0), focs_mme_statistic)
focs_result_q7
focs_mme_condition_vector = function(param) {
c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$w)
c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$r)
}
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_mme_condition_vector = function(param) {
c(c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$w), c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$r))
}
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method="BFGS")$par
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_mme_condition_vector = function(param) {
c(c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r), c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w))
}
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method = "BFGS")$par
focs_mme_condition_vector = function(param) {
c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
}
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method = "BFGS")$par
focs_result_q7
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_mme_condition_vector = function(param) {
c(c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r), c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w))
}
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_mme_condition_vector = function(param) {
c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
return(c(c1, c2))
}
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_mme_condition_vector = function(param) {
c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
return(c(c_1, c_2))
}
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_mme_condition_vector = function(param) {
c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
return(c(c_1, c_2))
}
focs_mme_statistic = function(param) {
100*norm(focs_mme_condition_vector(param), type="2")^2
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7
focs_mme_statistic = function(param) {
100*t(focs_mme_condition_vector(param)) %*% diag(2) %*% focs_mme_condition_vector(param)
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic)$par
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method = "BFGS")$par
focs_result_q7
focs_mme_condition_vector = function(param) {
c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
return(c(c_1, c_2))
}
focs_mme_statistic = function(param) {
100*t(focs_mme_condition_vector(param)) %*% diag(2) %*% focs_mme_condition_vector(param)
}
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method = "BFGS")$par
focs_result_q7
result_q8 = optim(c(1,1), mme_statistic, method = "BFGS")$par
result_q8 = optim(c(1,1), mme_statistic, method = "BFGS")$par
result_q8 = optim(c(1,1), mme_statistic, method = "BFGS")$par
#matrix entries by hand
g11 = mean(-data_ps1_q7$K*log(data_ps1_q7$K))
g12 = mean(-data_ps1_q7$K*log(data_ps1_q7$L))
g21 = mean(-data_ps1_q7$K*log(data_ps1_q7$L))
g22 = mean(-data_ps1_q7$L*log(data_ps1_q7$L))
G = matrix(c(g11, g12, g21, g22), ncol = 2)
calculate_h = function(data) {                                           #generates the fitted value
h_1 = data[1]*(log(data[3]) - result_q8[1]*log(data[1]) - result_q8[2]*log(data[2]))
h_2 = data[2]*(log(data[3]) - result_q8[1]*log(data[1]) - result_q8[2]*log(data[2]))
return(c(h_1, h_2))
}
s11 = mean(h_at_fit$K^2)
s12 = mean(h_at_fit$K * h_at_fit$L)
s21 = s12
focs_result_q7
result_q8 = optim(c(1,1), mme_statistic, method = "BFGS")$par
result_q7 = optim(c(0,0), mme_statistic, method = "BFGS")$par
mme_condition_vector = function(param) {                          #analogous function for two param
c1 = sum(data_ps1_q7$L*(log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K) -
param[2]*log(data_ps1_q7$L)))
c2 = sum(data_ps1_q7$K*(log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K) -
param[2]*log(data_ps1_q7$L)))
return(c(c1, c2))
}
mme_statistic = function(param) {                      #calculates the value of the stat for W = I
100*norm(mme_condition_vector(param), type = "2")^2
}
result_q7 = optim(c(0,0), mme_statistic, method = "BFGS")$par #BFGS dando erro?
rresult_q7
result_q7
result_q8 = optim(c(1,1), mme_statistic, method = "BFGS")$par
result_q8
focs_result_q8 = optim(c(1,1), focs_mme_statistic, method = "BFGS")$par
focs_result_q7
focs_result_q8
optim(c(0,0), focs_mme_statistic, method = "BFGS")$par
optim(c(1,1), focs_mme_statistic, method = "BFGS")$par
