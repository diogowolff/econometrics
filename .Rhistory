library(purrr)
data_ps1_q6 <- readRDS('data_ps1_q6.Rds')
data_ps1_q7 <- readRDS('data_ps1_q7.Rds')
mme_synthetic_stat = function(param) {             #function that calculates the sample value of g
sum(data_ps1_q6$L*(log(data_ps1_q6$Y) - param*log(data_ps1_q6$K) -
(1-param)*log(data_ps1_q6$L)))
}
mme_synthetic_stat_2 = function(param) {             #function that calculates the sample value of g
sum((log(data_ps1_q6$Y) - param*log(data_ps1_q6$K) -
(1-param)*log(data_ps1_q6$L)))
}
x = seq(0, 1, 0.01)
fitted_curve =  purrr::map_dbl(x, mme_synthetic_stat)
fitted_curve_2 =  purrr::map_dbl(x, mme_synthetic_stat_2)
plot(fitted_curve_2)
index = match(min(abs(fitted_curve)), abs(fitted_curve))
index_2 = match(min(abs(fitted_curve_2)), abs(fitted_curve_2))
seq(0, 1, 0.01)[31]
mme_condition_vector = function(param) {                          #analogous function for two param
c1 = sum(data_ps1_q7$L*(log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K) -
param[2]*log(data_ps1_q7$L)))
c2 = sum(data_ps1_q7$K*(log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K) -
param[2]*log(data_ps1_q7$L)))
return(c(c1, c2))
}
mme_statistic = function(param) {                      #calculates the value of the stat for W = I
100*norm(mme_condition_vector(param), type = "2")^2
}
result_q7 = optim(c(0,0), mme_statistic, method = "BFGS")$par #BFGS dando erro?
focs_mme_condition_vector = function(param) {
c_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
c_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
return(c(c_1, c_2))
}
focs_mme_statistic = function(param) {
100*t(focs_mme_condition_vector(param)) %*% diag(2) %*% focs_mme_condition_vector(param)
} # Pro BFGS functionar precisei definir a fç objetivo usando g' I g. Usando norma dava erro. (???)
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method = "BFGS")$par
focs_result_q7 # Results: (alpha, beta) = (0.2, 0.6)
result_q8 = optim(c(1,1), mme_statistic, method = "BFGS")$par
focs_result_q8 = optim(c(1,1), focs_mme_statistic, method = "BFGS")$par  # Mudou absurdamente! (???)
focs_result_q7
focs_result_q8
#matrix entries by hand
g11 = mean(-data_ps1_q7$K*log(data_ps1_q7$K))
g12 = mean(-data_ps1_q7$K*log(data_ps1_q7$L))
g21 = mean(-data_ps1_q7$K*log(data_ps1_q7$L))
g22 = mean(-data_ps1_q7$L*log(data_ps1_q7$L))
G = matrix(c(g11, g12, g21, g22), ncol = 2)
calculate_h = function(data) {                                           #generates the fitted value
h_1 = data[1]*(log(data[3]) - result_q8[1]*log(data[1]) - result_q8[2]*log(data[2]))
h_2 = data[2]*(log(data[3]) - result_q8[1]*log(data[1]) - result_q8[2]*log(data[2]))
return(c(h_1, h_2))
}
h_at_fit = data.frame(calculate_h(data_ps1_q7[, 4:6]))
s11 = mean(h_at_fit$K^2) ###### h_at_fit não está definido?
s12 = mean(h_at_fit$K * h_at_fit$L)
s21 = s12
s22 = mean(h_at_fit$L^2)
S = matrix(c(s11, s12, s21, s22), ncol = 2)
S
#variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
F
V
W = solve(S)
value_function = function(param) {
h1 = mean(data_ps1_q7$K * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h2 = mean(data_ps1_q7$L * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h = c(h1, h2)
Qn = t(h) %*% W %*% h
return(Qn)
}
result_q10 = optim(c(0,0), value_function, method = "BFGS")$par
focs_calculate_h = function(data) { #generates the fitted value
h_1 = data[1]*(log(data[3]) - focs_result_q8[1]*log(data[1]) - focs_result_q8[2]*log(data[2]))
h_2 = data[2]*(log(data[3]) - focs_result_q8[1]*log(data[1]) - focs_result_q8[2]*log(data[2]))
return(c(h_1, h_2))
}
focs_calculate_h = function(data) { #generates the fitted value
h_1 = data[1]*(log(data[3]) - focs_result_q8[1]*log(data[1]) - focs_result_q8[2]*log(data[2]))
h_2 = data[2]*(log(data[3]) - focs_result_q8[1]*log(data[1]) - focs_result_q8[2]*log(data[2]))
return(c(h_1, h_2))
}
focs_h_at_fit = data.frame(focs_calculate_h(data_ps1_q7[, 4:6]))
focs_s11 = mean(focs_h_at_fit$K^2)
focs_s12 = mean(focs_h_at_fit$K * focs_h_at_fit$L)
focs_s21 = focs_s12
focs_s22 = mean(focs_h_at_fit$L^2)
S = matrix(c(s11, s12, s21, s22), ncol = 2)
focs_S = matrix(c(focs_s11, focs_s12, focs_s21, focs_s22), ncol = 2)
#variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
#variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
focs_V = 1/100*solve(t(G) %*% G) %*% t(G) %*% focs_S %*% G %*% solve(t(G) %*% G)
print(V)
print(focs_V)
result_q8 = optim(c(1,1), mme_statistic, method = "BFGS")$par
print(result_q8)
print(focs_result_q8)
focs_result_q7
#matrix entries by hand
g11 = mean(-data_ps1_q7$K*log(data_ps1_q7$K))
g12 = mean(-data_ps1_q7$K*log(data_ps1_q7$L))
g21 = mean(-data_ps1_q7$K*log(data_ps1_q7$L))
g22 = mean(-data_ps1_q7$L*log(data_ps1_q7$L))
G = matrix(c(g11, g12, g21, g22), ncol = 2)
calculate_h = function(data) { #generates the fitted value
h_1 = data[1]*(log(data[3]) - result_q8[1]*log(data[1]) - result_q8[2]*log(data[2]))
h_2 = data[2]*(log(data[3]) - result_q8[1]*log(data[1]) - result_q8[2]*log(data[2]))
return(c(h_1, h_2))
}
focs_calculate_h = function(data) { #generates the fitted value
h_1 = data[1]*(log(data[3]) - focs_result_q7[1]*log(data[1]) - focs_result_q7[2]*log(data[2]))
h_2 = data[2]*(log(data[3]) - focs_result_q7[1]*log(data[1]) - focs_result_q7[2]*log(data[2]))
return(c(h_1, h_2))
}
h_at_fit = data.frame(calculate_h(data_ps1_q7[, 4:6]))
focs_h_at_fit = data.frame(focs_calculate_h(data_ps1_q7[, 4:6]))
s11 = mean(h_at_fit$K^2)
s12 = mean(h_at_fit$K * h_at_fit$L)
s21 = s12
s22 = mean(h_at_fit$L^2)
focs_s11 = mean(focs_h_at_fit$K^2)
focs_s12 = mean(focs_h_at_fit$K * focs_h_at_fit$L)
focs_s21 = focs_s12
focs_s22 = mean(focs_h_at_fit$L^2)
S = matrix(c(s11, s12, s21, s22), ncol = 2)
focs_S = matrix(c(focs_s11, focs_s12, focs_s21, focs_s22), ncol = 2)
#variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
focs_V = 1/100*solve(t(G) %*% G) %*% t(G) %*% focs_S %*% G %*% solve(t(G) %*% G)
print(V)
print(focs_V)
focs_value_function = function(param) {
h1 = mean(data_ps1_q7$K * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h2 = mean(data_ps1_q7$L * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h = c(h1, h2)
Qn = t(h) %*% focs_W %*% h
return(Qn)
}
result_q10 = optim(c(0,0), value_function, method = "BFGS")$par
focs_result_q10 = optim(c(0,0), focs_value_function, method = "BFGS")$par
W = solve(S)
focs_W = solve(focs_S)
value_function = function(param) {
h1 = mean(data_ps1_q7$K * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h2 = mean(data_ps1_q7$L * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h = c(h1, h2)
Qn = t(h) %*% W %*% h
return(Qn)
}
focs_value_function = function(param) {
h1 = mean(data_ps1_q7$K * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h2 = mean(data_ps1_q7$L * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h = c(h1, h2)
Qn = t(h) %*% focs_W %*% h
return(Qn)
}
result_q10 = optim(c(0,0), value_function, method = "BFGS")$par
focs_result_q10 = optim(c(0,0), focs_value_function, method = "BFGS")$par
print(result_q10)
print(focs_result_q10)
print(V)
print(focs_V)
W = solve(S)
S = matrix(c(s11, s12, s21, s22), ncol = 2)
focs_S = matrix(c(focs_s11, focs_s12, focs_s21, focs_s22), ncol = 2)
S
focs_S
focs_value_function = function(param) {
h1 = mean(data_ps1_q7$K * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h2 = mean(data_ps1_q7$L * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h = c(h1, h2)
Qn = t(h) %*% focs_W %*% h
return(Qn)
}
result_q10 = optim(c(0,0), value_function, method = "BFGS")$par
focs_result_q10 = optim(c(0,0), focs_value_function, method = "BFGS")$par
print(result_q10)
print(focs_result_q10)
W
focs_W
focs_result_q7
focs_result_q7[1]
focs_g11 = mean(data_ps1_q7$p * data_ps1_q7$K^(focs_result_q7[1]-1) * data_ps1_q7$L^(focs_result_q7[2])*(1 + focs_result_q7[1] * ln(data_ps1_q7$K)))
focs_g11 = mean(data_ps1_q7$p * data_ps1_q7$K^(focs_result_q7[1]-1) * data_ps1_q7$L^(focs_result_q7[2])*(1 + focs_result_q7[1] * log(data_ps1_q7$K)))
focs_g11
focs_g12 = mean(focs_result_q7[1] * data_ps1_q7$p * data_ps1_q7$K^(focs_result_q7[1] - 1) * data_ps1_q7$L^(focs_result_q7[2]) * log(data_ps1_q7$L))
focs_g12
focs_g21 = mean(focs_result_q7[2] * data_ps1_q7$p * data_ps1_q7$K^(focs_result_q7[1]) * log(data_ps1_q7$K) * data_ps1_q7$L^(focs_result_q7[2]-1))
focs_g21
focs_g22 = mean(data_ps1_q7$p * data_ps1_q7$K^(focs_result_q7[1]) * data_ps1_q7$L^(focs_result_q7[2]-1) * (1 + focs_result_q7[2]*log(data_ps1_q7$L)))
focs_G = matrix(c(focs_g11, focs_g12, focs_g21, focs_g22), ncol = 2)
focs_G
focs_calculate_h = function(data) { #generates the fitted value
h_1 = data[1]*(log(data[3]) - focs_result_q7[1]*log(data[1]) - focs_result_q7[2]*log(data[2]))
h_2 = data[2]*(log(data[3]) - focs_result_q7[1]*log(data[1]) - focs_result_q7[2]*log(data[2]))
return(c(h_1, h_2))
}
focs_h_at_fit = data.frame(focs_calculate_h(data_ps1_q7[, 4:6]))
focs_s11 = mean(focs_h_at_fit$K^2)
focs_s12 = mean(focs_h_at_fit$K * focs_h_at_fit$L)
focs_s21 = focs_s12
focs_s22 = mean(focs_h_at_fit$L^2)
S = matrix(c(s11, s12, s21, s22), ncol = 2)
focs_S = matrix(c(focs_s11, focs_s12, focs_s21, focs_s22), ncol = 2)
# Variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
focs_V = 1/100*solve(t(focs_G) %*% focs_G) %*% t(focs_G) %*% focs_S %*% focs_G %*% solve(t(focs_G) %*% focs_G)
focs_V
focs_S
S
focs_S
focs_V
focs_calculate_h = function(data) { #generates the fitted value
c_1 = param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r
c_2 = param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w
return(c(h_1, h_2))
}
h_at_fit = data.frame(calculate_h(data_ps1_q7[, 4:6]))
focs_h_at_fit = data.frame(focs_calculate_h(data_ps1_q7[, 4:6]))
data_ps1_q7[1]
data_ps1_q7[2]
data_ps1_q7[3]
data_ps1_q7[,4:6]
data_ps1_q7[3]
focs_calculate_h = function(data) { #generates the fitted value
c_1 = focs_result_q7[1] * data[3] * data[4]^(focs_result_q7[1] - 1) * data[5]^(focs_result_q7[2]) - data[1]
c_2 = focs_result_q7[2] * data[3] * data[4]^(focs_result_q7[1]) * data[5]^(focs_result_q7[2] - 1) - data[2]
return(c(h_1, h_2))
}
h_at_fit = data.frame(calculate_h(data_ps1_q7[, 4:6]))
focs_h_at_fit = data.frame(focs_calculate_h(data_ps1_q7))
focs_calculate_h = function(data) { #generates the fitted value
h_1 = focs_result_q7[1] * data[3] * data[4]^(focs_result_q7[1] - 1) * data[5]^(focs_result_q7[2]) - data[1]
h_2 = focs_result_q7[2] * data[3] * data[4]^(focs_result_q7[1]) * data[5]^(focs_result_q7[2] - 1) - data[2]
return(c(h_1, h_2))
}
focs_h_at_fit = data.frame(focs_calculate_h(data_ps1_q7))
s11 = mean(h_at_fit$K^2)
s12 = mean(h_at_fit$K * h_at_fit$L)
s21 = s12
s22 = mean(h_at_fit$L^2)
focs_s11 = mean(focs_h_at_fit$K^2)
focs_s12 = mean(focs_h_at_fit$K * focs_h_at_fit$L)
focs_s21 = focs_s12
focs_s22 = mean(focs_h_at_fit$L^2)
S = matrix(c(s11, s12, s21, s22), ncol = 2)
focs_S = matrix(c(focs_s11, focs_s12, focs_s21, focs_s22), ncol = 2)
# Variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
focs_V = 1/100*solve(t(focs_G) %*% focs_G) %*% t(focs_G) %*% focs_S %*% focs_G %*% solve(t(focs_G) %*% focs_G)
# Variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
focs_V = 1/100*solve(t(focs_G) %*% focs_G) %*% t(focs_G) %*% focs_S %*% focs_G %*% solve(t(focs_G) %*% focs_G)
focs_V
focs_h_at_fit
focs_h_at_fit$K
focs_h_at_fit$p
focs_h_at_fit$p.1
focs_h_at_fit$p
focs_h_at_fit$p.1
focs_h_at_fit[1]
focs_h_at_fit[2]
h_at_fit
View(h_at_fit)
focs_h_at_fit$[1]^2
focs_h_at_fit[1]^2
focs_h_at_fit[1]^0
focs_s11 = mean(focs_h_at_fit[1]^2)
focs_s12 = mean(focs_h_at_fit[1] * focs_h_at_fit[2])
focs_s11 = mean(focs_h_at_fit[1]^2)
focs_h_at_fit[1]^2
mean(focs_h_at_fit[1]^2)
View(focs_h_at_fit[1]^2)
focs_s21 = focs_s12
focs_s22 = mean(focs_h_at_fit[2]^2)
focs_s12 = mean(focs_h_at_fit[1] * focs_h_at_fit[2])
focs_h_at_fit[1]
focs_h_at_fit[1]^2
focs_s11 = mean(focs_h_at_fit[1]^2)
sum(focs_h_at_fit[1]^2)
focs_s11 = sum(focs_h_at_fit[1]^2)/100
focs_s11 = sum(focs_h_at_fit[1]^2)/100
focs_s12 = sum(focs_h_at_fit[1] * focs_h_at_fit[2])/100
focs_s21 = focs_s12
focs_s22 = sum(focs_h_at_fit[2]^2)/100
S = matrix(c(s11, s12, s21, s22), ncol = 2)
focs_S = matrix(c(focs_s11, focs_s12, focs_s21, focs_s22), ncol = 2)
# Variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
# Variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
focs_V = 1/100*solve(t(focs_G) %*% focs_G) %*% t(focs_G) %*% focs_S %*% focs_G %*% solve(t(focs_G) %*% focs_G)
focs_V
#focs_s11 = sum(focs_h_at_fit[1]^2)/100
focs_s11 = mean(focs_h_at_fit[1]^2)
focs_s11 = sum(focs_h_at_fit[1]^2)/100
View(focs_h_at_fit[1])
focs_h_at_fit[1]
typeof(focs_h_at_fit[1])
focs_s11 = sum(focs_h_at_fit[1]^2)/100
focs_s12 = sum(focs_h_at_fit[1] * focs_h_at_fit[2])/100
focs_s21 = focs_s12
focs_s22 = sum(focs_h_at_fit[2]^2)/100
S = matrix(c(s11, s12, s21, s22), ncol = 2)
focs_S = matrix(c(focs_s11, focs_s12, focs_s21, focs_s22), ncol = 2)
# Variance formula
V = 1/100*solve(t(G) %*% G) %*% t(G) %*% S %*% G %*% solve(t(G) %*% G)
focs_V = 1/100*solve(t(focs_G) %*% focs_G) %*% t(focs_G) %*% focs_S %*% focs_G %*% solve(t(focs_G) %*% focs_G)
focs_V
print(V)
print(focs_V)
View(focs_h_at_fit)
focs_s11
focs_h_at_fit[1] %*% t(focs_h_at_fit[2])
focs_h_at_fit %*% t(focs_h_at_fit)
cbind(focs_h_at_fit[1], focs_h_at_fit[2])
t(cbind(focs_h_at_fit[1], focs_h_at_fit[2]))
cbind(focs_h_at_fit[1], focs_h_at_fit[2])
cbind(focs_h_at_fit[1], focs_h_at_fit[2]) * t(cbind(focs_h_at_fit[1], focs_h_at_fit[2]))
t(cbind(focs_h_at_fit[1], focs_h_at_fit[2])) %*% cbind(focs_h_at_fit[1], focs_h_at_fit[2])
cbind(focs_h_at_fit[1], focs_h_at_fit[2])
t(cbind(focs_h_at_fit[1], focs_h_at_fit[2]))
t(cbind(focs_h_at_fit[1], focs_h_at_fit[2])) %*% cbind(focs_h_at_fit[1], focs_h_at_fit[2])
cbind(focs_h_at_fit[1], focs_h_at_fit[2]) %*% t(cbind(focs_h_at_fit[1], focs_h_at_fit[2]))
t(cbind(focs_h_at_fit[1], focs_h_at_fit[2]))
View(t(cbind(focs_h_at_fit[1], focs_h_at_fit[2])))
cbind((1,1),(2,2))
cbind(c(1,1),c(2,2))
cbind(c(1,1),c(2,2)) %*% cbind(c(1,1),c(2,2))
cbind(focs_h_at_fit[1], focs_h_at_fit[2])
cbind(c(focs_h_at_fit[1]), focs_h_at_fit[2])
cbind(c(focs_h_at_fit[1]), c(focs_h_at_fit[2]))
focs_G
focs_h_at_fit
View(focs_h_at_fit)
as.matrix(focs_h_at_fit)
t(as.matrix(focs_h_at_fit)) %*% as.matrix(focs_h_at_fit)
s11
t(as.matrix(focs_h_at_fit)) %*% as.matrix(focs_h_at_fit)
focs_calculate_h(data_ps1_q7)
focs_result_q7
focs_mme_condition_vector(c(0,0))
focs_mme_statistic = function(param) {
100*t(focs_mme_condition_vector(param))  %*% focs_mme_condition_vector(param)
} # Pro BFGS functionar precisei definir a fç objetivo usando g' I g. Usando norma dava erro. (???)
focs_result_q7 = optim(c(0,0), focs_mme_statistic, method = "BFGS")$par
focs_result_q7 # Results: (alpha, beta) = (0.2, 0.6)
focs_V
S = t(as.matrix(focs_h_at_fit)) %*% as.matrix(focs_h_at_fit)/100
S
S = matrix(c(s11, s12, s21, s22), ncol = 2)
S
focs_S
focs_S = matrix(c(focs_s11, focs_s12, focs_s21, focs_s22), ncol = 2)
focs_S
S = t(as.matrix(h_at_fit)) %*% as.matrix(h_at_fit)/100
S
G
g11 = mean(-data_ps1_q7$K*log(data_ps1_q7$K))
g12 = mean(-data_ps1_q7$K*log(data_ps1_q7$L))
g21 = mean(-data_ps1_q7$L*log(data_ps1_q7$K))
g22 = mean(-data_ps1_q7$L*log(data_ps1_q7$L))
G = matrix(c(g11, g12, g21, g22), ncol = 2)
G
W = solve(S)
focs_W = solve(focs_S)
value_function = function(param) {
h1 = mean(data_ps1_q7$K * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h2 = mean(data_ps1_q7$L * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
- param[2]*log(data_ps1_q7$L)))
h = c(h1, h2)
Qn = t(h) %*% W %*% h
return(Qn)
}
## Tem que mudar
focs_value_function = function(param) {
#h1 = mean(data_ps1_q7$K * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
#                          - param[2]*log(data_ps1_q7$L)))
#h2 = mean(data_ps1_q7$L * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
#                           - param[2]*log(data_ps1_q7$L)))
h_1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
h_2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
h = c(h1, h2)
Qn = t(h) %*% focs_W %*% h
return(Qn)
}
result_q10 = optim(c(0,0), value_function, method = "BFGS")$par
focs_result_q10 = optim(c(0,0), focs_value_function, method = "BFGS")$par
## Tem que mudar
focs_value_function = function(param) {
#h1 = mean(data_ps1_q7$K * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
#                          - param[2]*log(data_ps1_q7$L)))
#h2 = mean(data_ps1_q7$L * (log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K)
#                           - param[2]*log(data_ps1_q7$L)))
h1 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
h2 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
h = c(h1, h2)
Qn = t(h) %*% focs_W %*% h
return(Qn)
}
result_q10 = optim(c(0,0), value_function, method = "BFGS")$par
focs_result_q10 = optim(c(0,0), focs_value_function, method = "BFGS")$par
print(result_q10)
print(focs_result_q10)
result_q7
focs_result_q7
focs_V
focs_result_q7
result_q7
mme_synthetic_stat = function(param) {             #function that calculates the sample value of g
sum(data_ps1_q6$L*(log(data_ps1_q6$Y) - param*log(data_ps1_q6$K) -
(1-param)*log(data_ps1_q6$L)))
}
mme_synthetic_stat_2 = function(param) {             #function that calculates the sample value of g
sum((log(data_ps1_q6$Y) - param*log(data_ps1_q6$K) -
(1-param)*log(data_ps1_q6$L)))
}
x = seq(0, 1, 0.01)
fitted_curve =  purrr::map_dbl(x, mme_synthetic_stat)
fitted_curve_2 =  purrr::map_dbl(x, mme_synthetic_stat_2)
plot(fitted_curve_2)
index = match(min(abs(fitted_curve)), abs(fitted_curve))
index_2 = match(min(abs(fitted_curve_2)), abs(fitted_curve_2))
seq(0, 1, 0.01)[31]
mme_condition_vector = function(param) {                          #analogous function for two param
c1 = sum(data_ps1_q7$L*(log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K) -
param[2]*log(data_ps1_q7$L)))
c2 = sum(data_ps1_q7$K*(log(data_ps1_q7$Y) - param[1]*log(data_ps1_q7$K) -
param[2]*log(data_ps1_q7$L)))
return(c(c1, c2))
}
mme_statistic = function(param) {                      #calculates the value of the stat for W = I
100*norm(mme_condition_vector(param), type = "2")^2
}
result_q7 = optim(c(0,0), mme_statistic, method = "BFGS")$par #BFGS dando erro?
result_q7
result_q10
focs_result_q10
three_eq_mme_condition_vector = function(param) {
c_1 = mean(data_ps1_q7$Y - data_ps1_q7$K^param[1]*data_ps1_q7$L^param[2])
c_2 = mean(param[1] * data_ps1_q7$p * data_ps1_q7$K^(param[1] - 1) * data_ps1_q7$L^(param[2]) - data_ps1_q7$r)
c_3 = mean(param[2] * data_ps1_q7$p * data_ps1_q7$K^(param[1]) * data_ps1_q7$L^(param[2] - 1) - data_ps1_q7$w)
return(c(c_1, c_2, c_3))
}
three_eq_mme_statistic = function(param) {
100*t(three_eq_mme_condition_vector(param)) %*% diag(3) %*% three_eq_mme_condition_vector(param)
}
three_eq_result_q7 = optim(c(0,0), three_eq_mme_statistic, method = "BFGS")$par
three_eq_result_q8 = optim(c(1,1), three_eq_mme_statistic, method = "BFGS")$par
three_eq_calculate_h = function(data) { #generates the fitted value
h_1 = data$Y - data$K^three_eq_result_q7[1]*data$L^three_eq_result_q7[2]
h_2 = three_eq_result_q7[1] * data$p * data$K^(three_eq_result_q7[1] - 1) * data$L^(three_eq_result_q7[2]) - data$r
h_3 = three_eq_result_q7[2] * data$p * data$K^(three_eq_result_q7[1]) * data$L^(three_eq_result_q7[2] - 1) - data$w
return(data.frame(h_1, h_2, h_3))
}
three_h_at_fit = three_eq_calculate_h(data_ps1_q7)
three_h_S = t(as.matrix(three_h_at_fit)) %*% as.matrix(three_h_at_fit)/100
three_g11 = mean(-three_eq_result_q7[1]*data_ps1_q7$K^(three_eq_result_q7[1]-1) * data_ps1_q7$L^(three_eq_result_q7[2]))
three_g12 = mean(-three_eq_result_q7[2]* data_ps1_q7$K^(three_eq_result_q7[1]) * data_ps1_q7$L^(three_eq_result_q7[2]-1))
three_g21 = mean(data_ps1_q7$p * data_ps1_q7$K^(three_eq_result_q7[1]-1) * data_ps1_q7$L^(three_eq_result_q7[2])*(1 + three_eq_result_q7[1] * log(data_ps1_q7$K)))
three_g22 = mean(three_eq_result_q7[1] * data_ps1_q7$p * data_ps1_q7$K^(three_eq_result_q7[1] - 1) * data_ps1_q7$L^(three_eq_result_q7[2]) * log(data_ps1_q7$L))
three_g31 = mean(three_eq_result_q7[2] * data_ps1_q7$p * data_ps1_q7$K^(three_eq_result_q7[1]) * log(data_ps1_q7$K) * data_ps1_q7$L^(three_eq_result_q7[2]-1))
three_g32 = mean(data_ps1_q7$p * data_ps1_q7$K^(three_eq_result_q7[1]) * data_ps1_q7$L^(three_eq_result_q7[2]-1) * (1 + three_eq_result_q7[2]*log(data_ps1_q7$L)))
three_G = matrix(c(three_g11, three_g12, three_g21, three_g22, three_g31, three_g32), ncol = 2)
three_G
three_V = 1/100*solve(t(three_G) %*% three_G) %*% t(three_G) %*% three_h_S %*% three_G %*% solve(t(three_G) %*% three_G)
three_eq_result_q7
three_eq_result_q8
focs_result_q8
focs_result_q7
result_q7
result_q8
focs_G
focs_S
G
S
V
three_G
three_h_S
three_V
